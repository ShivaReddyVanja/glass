// MongoDB/Mongoose Models for PickleGlass Migration
// Each schema maps to a Firestore collection previously used in the project.
// Adjust fields/types as needed for your application.

const mongoose = require('mongoose');

/**
 * User Schema
 * ----------------
 * Purpose: Stores user account information for each registered user.
 * Why: Represents both authenticated (Firebase/NextAuth) and local users.
 * What it represents: User identity, profile, and role in the app.
 * Key fields: uid (unique user ID), email, displayName, photoURL, role.
 * Usage: Used for authentication, authorization, and associating data (sessions, presets, etc.) to a user.
 */
const UserSchema = new mongoose.Schema({
  uid: { type: String, required: true, unique: true }, // Firestore UID or NextAuth UID
  email: { type: String, required: true, unique: true },
  displayName: { type: String },
  photoURL: { type: String },
  role: { type: String }, // e.g., 'interviewer', 'interviewee'
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});
const User = mongoose.model('User', UserSchema);

/**
 * Session Schema
 * ----------------
 * Purpose: Stores information about each user session (e.g., an interview or chat session).
 * Why: Sessions group together related activities, transcripts, AI messages, and summaries.
 * What it represents: A single session or conversation context for a user.
 * Key fields: userId (owner), title, timestamps.
 * Usage: Used to fetch all data related to a specific session, and to organize user history.
 */
const SessionSchema = new mongoose.Schema({
  userId: { type: String, required: true, index: true }, // Reference to User.uid
  title: { type: String },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
  // Add other session-specific fields as needed
});
const Session = mongoose.model('Session', SessionSchema);

/**
 * Preset Schema
 * ----------------
 * Purpose: Stores user-defined prompt presets for AI interactions.
 * Why: Allows users to save and reuse custom prompts for different tasks or sessions.
 * What it represents: A named prompt template associated with a user.
 * Key fields: userId (owner), prompt, title, timestamps.
 * Usage: Used to quickly load and apply user-specific prompt templates in the UI.
 */
const PresetSchema = new mongoose.Schema({
  userId: { type: String, required: true, index: true },
  prompt: { type: String },
  title: { type: String },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});
const Preset = mongoose.model('Preset', PresetSchema);

/**
 * ProviderSettings Schema
 * ----------------
 * Purpose: Stores API keys and model selections for each user (e.g., LLM or STT provider preferences).
 * Why: Allows users to configure which AI/LLM/STT providers and models they want to use.
 * What it represents: User-specific settings for external service providers.
 * Key fields: userId (owner), apiKey, selected_llm_model, selected_stt_model, timestamps.
 * Usage: Used to fetch and apply user preferences for AI and speech-to-text services.
 */
const ProviderSettingsSchema = new mongoose.Schema({
  userId: { type: String, required: true, index: true },
  apiKey: { type: String }, // Store encrypted if needed
  selected_llm_model: { type: String },
  selected_stt_model: { type: String },
  createdAt: { type: Date, default: Date.now },
  updatedAt: { type: Date, default: Date.now }
});
const ProviderSettings = mongoose.model('ProviderSettings', ProviderSettingsSchema);

/**
 * AiMessage Schema
 * ----------------
 * Purpose: Stores messages generated by the AI during a session.
 * Why: Keeps a record of all AI responses for each session, enabling chat history and context.
 * What it represents: A single AI-generated message within a session.
 * Key fields: sessionId (parent), content, createdAt.
 * Usage: Used to display conversation history and context for ongoing or past sessions.
 */
const AiMessageSchema = new mongoose.Schema({
  sessionId: { type: String, required: true, index: true },
  content: { type: String }, // Store encrypted if needed
  createdAt: { type: Date, default: Date.now }
});
const AiMessage = mongoose.model('AiMessage', AiMessageSchema);

/**
 * Summary Schema
 * ----------------
 * Purpose: Stores session summaries, including TLDR, main text, bullet points, and action items.
 * Why: Allows users to quickly review the key points and actions from a session.
 * What it represents: A summary document for a session, often generated by AI.
 * Key fields: sessionId (parent), tldr, text, bullet_json, action_json, createdAt.
 * Usage: Used to display concise overviews and actionable items for each session.
 */
const SummarySchema = new mongoose.Schema({
  sessionId: { type: String, required: true, index: true },
  tldr: { type: String },
  text: { type: String },
  bullet_json: { type: String },
  action_json: { type: String },
  createdAt: { type: Date, default: Date.now }
});
const Summary = mongoose.model('Summary', SummarySchema);

/**
 * Transcript Schema
 * ----------------
 * Purpose: Stores speech-to-text (STT) transcripts for each session.
 * Why: Enables review, search, and analysis of spoken content in sessions.
 * What it represents: A single transcript segment (or full transcript) for a session.
 * Key fields: sessionId (parent), text, startAt, endAt, createdAt.
 * Usage: Used to display and analyze spoken content, and to provide context for AI and summaries.
 */
const TranscriptSchema = new mongoose.Schema({
  sessionId: { type: String, required: true, index: true },
  text: { type: String },
  startAt: { type: Date },
  endAt: { type: Date },
  createdAt: { type: Date, default: Date.now }
});
const Transcript = mongoose.model('Transcript', TranscriptSchema);

// Export all models
module.exports = {
  User,
  Session,
  Preset,
  ProviderSettings,
  AiMessage,
  Summary,
  Transcript
}; 